@model AdminViewModel
@{
    ViewData["Title"] = "Home Page";
}
@using Microsoft.AspNetCore.Http;

<div class="text-center">


    <h1 class="display-4">
        Welcome @Context.Session.GetString("Name")
    </h1>
    @*<script src="https://d3js.org/d3.v7.min.js"></script>*@
    <script src="https://d3js.org/d3.v4.js"></script>
    <hr />
    <div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Dashboard:</h5>
                <h5 class="card-title">Get your status:</h5>
                <div id="chart1" class="card" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title">כמה כרטיסים מכל סוג נקנו עד כה </h5>
                        <h6 class="card-subtitle mb-2 text-muted"><strong>......</strong> ....</h6>
                        <p class="card-text">.....</p>
                    </div>
                </div>
                <div id="chart2" class="card" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title">כמה כרטיסים מכל סוג נקנו עד כה </h5>
                        <h6 class="card-subtitle mb-2 text-muted"><strong>......</strong> ....</h6>
                        <p class="card-text">.....</p>
                    </div>
                </div>
                <div id="chart3" class="card" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title">כמה כרטיסים מכל סוג נקנו עד כה </h5>
                        <h6 class="card-subtitle mb-2 text-muted"><strong>......</strong> ....</h6>
                        <p class="card-text">.....</p>
                    </div>
                </div>


            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">The amount of tickets purchased this month:</h5>
                <h5 class="card-title">The amount of tickets purchased this month:</h5>
                <h5 class="card-title">The amount of Active Trainees:</h5>


            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Add a new trainer</h5>
                <a asp-controller="Trainers" asp-action="Create">+</a>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Add a new training type</h5>
                <a asp-controller="TrainingTypes" asp-action="Create">+</a>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">See all the TicketTypes</h5>
                <a asp-controller="TicketTypes" asp-action="Index">+</a>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Add a new TicketType</h5>
                <a asp-controller="TicketTypes" asp-action="Create">+</a>
            </div>
        </div>
    </div>
</div>

<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
<script>
    var data = @Html.Raw(JsonSerializer.Serialize(Model.TicketsPie));


    // set the dimensions and margins of the graph
    var width = 450
    height = 450
    margin = 30
    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
    var radius = Math.min(width, height) / 2 - margin
    // append the svg object to the div called 'my_dataviz1'
    var svg = d3.select("#chart1")
        .append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
    // Create dummy data
    //var data = @*@Json.Serialize(ViewBag.OrderCount)*@
    // set the color scale
    var color = d3.scaleOrdinal()
        .domain(data)
        .range(d3.schemeSet2);
    // Compute the position of each group on the pie:
    var pie = d3.pie()
        .value(function (d) { return d.value; })
    var data_ready = pie(d3.entries(data))
    // Now I know that group A goes from 0 degrees to x degrees and so on.
    // shape helper to build arcs:
    var arcGenerator = d3.arc()
        .innerRadius(0)
        .outerRadius(radius)
    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
    svg
        .selectAll('mySlices')
        .data(data_ready)
        .enter()
            .append('path')
                .attr('d', arcGenerator)
                .attr('fill', function (d) { return (color(d.data.key)) })
                .attr("stroke", "black")
                .style("stroke-width", "2px")
                .style("opacity", 0.7)
            .append('svg:title')
                .text(function (d) { return d.data.key })
                .attr("transform", function (d) { return "translate(" + arcGenerator.centroid(d) + ")"; })
                .style("text-anchor", "middle")
                .style("font-size", 17)


</script>

<script>
    // set the dimensions and margins of the graph
    var margin = { top: 30, right: 30, bottom: 70, left: 60 },
        width = 500 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;
    // append the svg object to the body of the page
    var svg = d3.select("#chart2")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");
    // Parse the Data
    @*var data = @Json.Serialize(ViewBag.DateResult)*@
    var data = @Html.Raw(JsonSerializer.Serialize(Model.TicketsPie));
    // X axis
    var x = d3.scaleBand()
        .range([0, width])
        .domain(data.map(function (d) { return d.date; }))
        .padding(0.2);
    svg.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x))
        .selectAll("text")
        .style("text-anchor", "end");
    // Add Y axis
    var y = d3.scaleLinear()
        .domain([0, d3.max(data, function(d, i) { return d.count })])
        .range([height, 0])
    svg.append("g")
        .call(d3.axisLeft(y));
    // Bars

    svg.selectAll("rect")
        .data(data)
        .enter()
        .append("rect")
        .attr("width", function (d) { return d * 10; })
        .attr("height", 50)
        .attr("y", function (d, i) { return i * 100 });
    //svg.selectAll("mybar")
    //    .data(data)
    //    .enter()
    //    .append("rect")
    //    .attr("x", function (d, i) { return x(d.date); })
    //    .attr("y", function (d,i) { return y(d.count); })
    //    .attr("width", x.bandwidth())
    //    .attr("height", function (d,i) { return height - y(d.count); })
    //    .attr("fill", "#69b3a2")
</script>

