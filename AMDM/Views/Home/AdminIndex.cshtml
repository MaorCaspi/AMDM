@model AdminViewModel
@{ ViewData["Title"] = "Home Page"; }
@using Microsoft.AspNetCore.Http;

<div class="text-center">


    <h1 class="display-4">
        Welcome @Context.Session.GetString("Name")
    </h1>
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
    <hr />
    <div>
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Dashboard:</h5>
                <h5 class="card-title">Get your status:</h5>
                <div class="row">
                    <div id="chart1" class="card g-col-6 " @*style="width: 30rem;"*@>
                        <div class="card-body">
                            <h5 class="card-title">
                                Occupancy in trainings:
                            </h5>
                            <h6 class="card-subtitle mb-2 text-muted"><strong>......</strong> ....</h6>
                            <p class="card-text">.....</p>
                        </div>
                    </div>
                    <div id="chart2" class="card g-col-6" @*style="width: 30rem;"*@>
                        <div class="card-body">
                            <h5 class="card-title">What types of tickets are using by trainees</h5>
                            <h6 class="card-subtitle mb-2 text-muted"><strong>......</strong> ....</h6>
                            <p class="card-text">.....</p>
                        </div>
                    </div>
                </div>



            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">The amount of tickets purchased this month: @Html.DisplayFor(model => model.SumOfTicketPurchasedThisMonth)</h5>
                <h5 class="card-title">The revenue from tickets of this month: @Html.DisplayFor(model => model.SumOfRevenueThisMonth) NIS</h5>
                <h5 class="card-title">The amount of Active Trainees: @Html.DisplayFor(model => model.ActiveTrainees)</h5>


            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Add a new trainer</h5>
                <a asp-controller="Trainers" asp-action="Create">+</a>
                <h5 class="card-title">
                    <a asp-controller="Trainers" asp-action="Index">See all trainers</a>
                </h5>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Add a new training type</h5>
                <a asp-controller="TrainingTypes" asp-action="Create">+</a>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">See all the TicketTypes</h5>
                <a asp-controller="TicketTypes" asp-action="Index">+</a>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Add a new TicketType</h5>
                <a asp-controller="TicketTypes" asp-action="Create">+</a>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">See all Trainees</h5>
                <a asp-controller="Trainees" asp-action="Index">+</a>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">See all the tickets purchased</h5>
                <a asp-controller="Tickets" asp-action="Index">+</a>
            </div>
        </div>
    </div>
</div>

<script>


    // set the dimensions and margins of the graph
    var margin = { top: 30, right: 30, bottom: 70, left: 60 },
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    var svg = d3.select("#chart1")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

    // Parse the Data
    var data = @Html.Raw(JsonSerializer.Serialize(Model.AllTrainingsBarplot));


        // X axis
        var x = d3.scaleBand()
            .range([0, width])
            .domain(data.map(function (d) { return d.Id; }))
            .padding(0.2);
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");

        // Add Y axis
        var y = d3.scaleLinear()
            .domain([0, 20])
            .range([height, 0]);
        svg.append("g")
            .call(d3.axisLeft(y));

        // Bars
    svg.selectAll("mybar")
        .data(data)
        .enter()
        .append("rect")
        .attr("x", function (d) { return x(d.Id); })
        .attr("y", function (d) { return y(d.MaxParticipant); })
        .attr("width", x.bandwidth())
        .attr("height", function (d) { return height - y(d.MaxParticipant); })
        .attr("fill", "#69b3a2");

    svg.selectAll("actualbar")
        .data(data)
        .enter()
        .append("rect")
        .attr("x", function (d) { return x(d.Id); })
        .attr("y", function (d) { return y(d.ActualParticipant); })
        .attr("width", x.bandwidth())
        .attr("height", function (d) { return height - y(d.ActualParticipant); })
        .attr("fill", "blue")




</script>

<script>

    // set the dimensions and margins of the graph
    var margin = { top: 10, right: 30, bottom: 90, left: 40 },
        width = 460 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    var svg = d3.select("#chart2")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

    // Parse the Data
    var data = @Html.Raw(JsonSerializer.Serialize(Model.TicketsTypesPurchasedLollipop));

        // X axis
        var x = d3.scaleBand()
            .range([0, width])
            .domain(data.map(function (d) { return d.Key; }))
            .padding(1);
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");

        // Add Y axis
        var y = d3.scaleLinear()
            .domain([0, @Model.AllTrainees])
            .range([height, 0]);
        svg.append("g")
            .call(d3.axisLeft(y));

        // Lines
        svg.selectAll("myline")
            .data(data)
            .enter()
            .append("line")
            .attr("x1", function (d) { return x(d.Key); })
            .attr("x2", function (d) { return x(d.Key); })
            .attr("y1", function (d) { return y(d.Value); })
            .attr("y2", y(0))
            .attr("stroke", "grey")

        // Circles
        svg.selectAll("mycircle")
            .data(data)
            .enter()
            .append("circle")
            .attr("cx", function (d) { return x(d.Key); })
            .attr("cy", function (d) { return y(d.Value); })
            .attr("r", "4")
            .style("fill", "#69b3a2")
            .attr("stroke", "black")
    

</script>

<div class="card display-4">
    <div class="card-body">
        <h5 class="card-title">
            <a asp-controller="Home" asp-action="Twitter">Post a tweet</a>
        </h5>
        
    </div>
</div>

