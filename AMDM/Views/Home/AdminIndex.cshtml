@model AdminViewModel
@{ ViewData["Title"] = "Home Page"; }
@using Microsoft.AspNetCore.Http;

<div class="text-center">


    <h1 class="display-4">
        Welcome @Context.Session.GetString("Name")
    </h1>
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
    <hr />
    <div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Dashboard:</h5>
                <h5 class="card-title">Get your status:</h5>
                <div id="chart1" class="card" style="width: 25rem;">
                    <div class="card-body">
                        <h5 class="card-title">כמה כרטיסים מכל סוג נקנו עד כה </h5>
                        <h6 class="card-subtitle mb-2 text-muted"><strong>......</strong> ....</h6>
                        <p class="card-text">.....</p>
                    </div>
                </div>
                <div id="chart2" class="card" style="width: 25rem;">
                    <div class="card-body">
                        <h5 class="card-title">כמה כרטיסים מכל סוג נקנו עד כה </h5>
                        <h6 class="card-subtitle mb-2 text-muted"><strong>......</strong> ....</h6>
                        <p class="card-text">.....</p>
                    </div>
                </div>
                <div id="chart3" class="card" style="width: 25rem;">
                    <div class="card-body">
                        <h5 class="card-title">What types of tickets are using by trainees</h5>
                        <h6 class="card-subtitle mb-2 text-muted"><strong>......</strong> ....</h6>
                        <p class="card-text">.....</p>
                    </div>
                </div>


            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">The amount of tickets purchased this month: @Html.DisplayFor(model => model.SumOfTicketPurchasedThisMonth)</h5>
                <h5 class="card-title">The revenue from tickets of this month: @Html.DisplayFor(model => model.SumOfRevenueThisMonth) NIS</h5>
                <h5 class="card-title">The amount of Active Trainees: @Html.DisplayFor(model => model.ActiveTrainees)</h5>


            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Add a new trainer</h5>
                <a asp-controller="Trainers" asp-action="Create">+</a>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Add a new training type</h5>
                <a asp-controller="TrainingTypes" asp-action="Create">+</a>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">See all the TicketTypes</h5>
                <a asp-controller="TicketTypes" asp-action="Index">+</a>
            </div>
        </div>
        <div class="card display-4">
            <div class="card-body">
                <h5 class="card-title">Add a new TicketType</h5>
                <a asp-controller="TicketTypes" asp-action="Create">+</a>
            </div>
        </div>
    </div>
</div>
<script>

    // set the dimensions and margins of the graph
    var margin = { top: 10, right: 30, bottom: 20, left: 50 },
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    var svg = d3.select("#chart1")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

    // Parse the Data
    var dataChart1 = @Html.Raw(JsonSerializer.Serialize(Model.AllTrainingsBarplot));
    console.log(dataChart1);

        // List of subgroups = header of the csv files = soil condition here
        var subgroups = data.columns.slice(1)

        // List of groups = species here = value of the first column called group -> I show them on the X axis
        var groups = d3.map(dataChart1, function (d) { return (d.group) }).keys()

        // Add X axis
        var x = d3.scaleBand()
            .domain(groups)
            .range([0, width])
            .padding([0.2])
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x).tickSizeOuter(0));

        // Add Y axis
        var y = d3.scaleLinear()
            .domain([0, 120])
            .range([height, 0]);
        svg.append("g")
            .call(d3.axisLeft(y));

        // color palette = one color per subgroup
        var color = d3.scaleOrdinal()
            .domain(subgroups)
            .range(d3.schemeSet2);

        //stack the data? --> stack per subgroup
        var stackedData = d3.stack()
            .keys(subgroups)
            (dataChart1)




        // ----------------
        // Highlight a specific subgroup when hovered
        // ----------------

        // What happens when user hover a bar
        var mouseover = function (d) {
            // what subgroup are we hovering?
            var subgroupName = d3.select(this.parentNode).datum().key; // This was the tricky part
            var subgroupValue = d.data[subgroupName];
            // Reduce opacity of all rect to 0.2
            d3.selectAll(".myRect").style("opacity", 0.2)
            // Highlight all rects of this subgroup with opacity 0.8. It is possible to select them since they have a specific class = their name.
            d3.selectAll("." + subgroupName)
                .style("opacity", 1)
        }

        // When user do not hover anymore
        var mouseleave = function (d) {
            // Back to normal opacity: 0.8
            d3.selectAll(".myRect")
                .style("opacity", 0.8)
        }

        // Show the bars
        svg.append("g")
            .selectAll("g")
            // Enter in the stack data = loop key per key = group per group
            .data(stackedData)
            .enter().append("g")
            .attr("fill", function (d) { return color(d.key); })
            .attr("class", function (d) { return "myRect " + d.key }) // Add a class to each subgroup: their name
            .selectAll("rect")
            // enter a second time = loop subgroup per subgroup to add all rectangles
            .data(function (d) { return d; })
            .enter().append("rect")
            .attr("x", function (d) { return x(d.dataChart1.group); })
            .attr("y", function (d) { return y(d[1]); })
            .attr("height", function (d) { return y(d[0]) - y(d[1]); })
            .attr("width", x.bandwidth())
            .attr("stroke", "grey")
            .on("mouseover", mouseover)
            .on("mouseleave", mouseleave)

    

</script>

<script>

    // set the dimensions and margins of the graph
    var margin = { top: 10, right: 30, bottom: 90, left: 40 },
        width = 460 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    var svg = d3.select("#chart3")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

    // Parse the Data
    var data = @Html.Raw(JsonSerializer.Serialize(Model.TicketsTypesPurchasedLollipop));
    console.log(data)

        // X axis
        var x = d3.scaleBand()
            .range([0, width-35])
            .domain(data.map(function (d) { return d.Key; }))
            .padding(1);
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");

        // Add Y axis
        var y = d3.scaleLinear()
            .domain([0, @Model.AllTrainees])
            .range([height, 0]);
        svg.append("g")
            .call(d3.axisLeft(y));

        // Lines
        svg.selectAll("myline")
            .data(data)
            .enter()
            .append("line")
            .attr("x1", function (d) { return x(d.Key); })
            .attr("x2", function (d) { return x(d.Key); })
            .attr("y1", function (d) { return y(d.Value); })
            .attr("y2", y(0))
            .attr("stroke", "grey")

        // Circles
        svg.selectAll("mycircle")
            .data(data)
            .enter()
            .append("circle")
            .attr("cx", function (d) { return x(d.Key); })
            .attr("cy", function (d) { return y(d.Value); })
            .attr("r", "4")
            .style("fill", "#69b3a2")
            .attr("stroke", "black")
    

</script>

<div class="card display-4">
    <div class="card-body">
        <h5 class="card-title">
            <a asp-controller="Home" asp-action="Twitter">Post a tweet</a>
        </h5>
        <a asp-controller="TrainingTypes" asp-action="Create">+</a>
    </div>
</div>

